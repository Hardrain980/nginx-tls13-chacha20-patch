diff -Nau3r nginx-1.17.1-origin/src/event/ngx_event_openssl.c nginx-1.17.1/src/event/ngx_event_openssl.c
--- a/src/event/ngx_event_openssl.c	2019-06-25 22:19:45.000000000 +1000
+++ b/src/event/ngx_event_openssl.c	2019-06-29 04:06:07.403675001 +1000
@@ -838,7 +838,7 @@
 
 ngx_int_t
 ngx_ssl_ciphers(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *ciphers,
-    ngx_uint_t prefer_server_ciphers)
+    ngx_uint_t prefer_server_ciphers, ngx_uint_t prefer_chacha20)
 {
     if (SSL_CTX_set_cipher_list(ssl->ctx, (char *) ciphers->data) == 0) {
         ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
@@ -851,6 +851,12 @@
         SSL_CTX_set_options(ssl->ctx, SSL_OP_CIPHER_SERVER_PREFERENCE);
     }
 
+#ifdef SSL_OP_PRIORITIZE_CHACHA
+    if (prefer_chacha20) {
+        SSL_CTX_set_options(ssl->ctx, SSL_OP_PRIORITIZE_CHACHA); 
+    }
+#endif
+
 #if (OPENSSL_VERSION_NUMBER < 0x10100001L && !defined LIBRESSL_VERSION_NUMBER)
     /* a temporary 512-bit RSA key is required for export versions of MSIE */
     SSL_CTX_set_tmp_rsa_callback(ssl->ctx, ngx_ssl_rsa512_key_callback);
@@ -859,6 +865,20 @@
     return NGX_OK;
 }
 
+ngx_int_t 
+ngx_ssl_ciphers_tls13(ngx_conf_t *cf, ngx_ssl_t *ssl, 
+    ngx_str_t *ciphers_tls13)
+{
+    if (SSL_CTX_set_ciphersuites(ssl->ctx, (char *) ciphers_tls13->data) == 0) {
+        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
+                      "SSL_CTX_set_ciphersuites(\"%V\") failed",
+                      ciphers_tls13);
+        return NGX_ERROR;
+    }
+
+    return NGX_OK;
+}
+
 
 ngx_int_t
 ngx_ssl_client_certificate(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *cert,
@@ -4273,6 +4293,80 @@
     return NGX_OK;
 }
 
+
+ngx_int_t 
+ngx_ssl_get_ciphers_tls13(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
+{
+#ifdef SSL_CTRL_GET_RAW_CIPHERLIST
+    int                n, i, bytes;
+    size_t             len;
+    u_char            *ciphers, *p;
+    const SSL_CIPHER  *cipher;
+
+    bytes = SSL_get0_raw_cipherlist(c->ssl->connection, NULL);
+    n = SSL_get0_raw_cipherlist(c->ssl->connection, &ciphers);
+
+    len = 0;
+    n /= bytes;
+
+    for (i = 0; i < n; i++) {
+        cipher = SSL_CIPHER_find(c->ssl->connection, ciphers + i * bytes);
+
+        if (cipher) {
+            len += ngx_strlen(SSL_CIPHER_get_name(cipher));
+        } else {
+            len += sizeof("0x" - 1 + bytes * (sizeof("00") - 1));
+        }
+
+        len += sizeof(":") - 1;
+    }
+
+    s->data = ngx_pnalloc(pool, len);
+
+    if (s->data == NULL) {
+        return NGX_ERROR;
+    }
+
+    p = s->data;
+
+    for (i = 0; i < n; i++) {
+        cipher = SSL_CIPHER_find(c->ssl->connection, ciphers + i * bytes);
+
+        if (cipher) {
+            p = ngx_sprintf(p, "%s", SSL_CIPHER_get_name(cipher));
+
+        } else {
+            p = ngx_sprintf(p, "0x");
+            p = ngx_hex_dump(p, ciphers + i * bytes, bytes);
+        }
+
+        *p++ = ':';
+    }
+
+    p--;
+
+    s->len = p - s->data;
+#else
+    u_char buf[4096];
+
+    if (SSL_get_shared_ciphers(c->ssl->connection, (char *) buf, 4096)
+        == NULL)
+    {
+        s->len = 0;
+        return NGX_OK;
+    }
+
+    s->len = ngx_strlen(buf);
+    s->data = ngx_pnalloc(pool, s->len);
+    if (s->data == NULL) {
+        return NGX_ERROR;
+    }
+
+    ngx_memcpy(s->data, buf, s->len);
+#endif
+    return NGX_OK;
+}
+
 
 ngx_int_t
 ngx_ssl_get_curves(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
diff -Nau3r nginx-1.17.1-origin/src/event/ngx_event_openssl.h nginx-1.17.1/src/event/ngx_event_openssl.h
--- a/src/event/ngx_event_openssl.h	2019-06-25 22:19:45.000000000 +1000
+++ b/src/event/ngx_event_openssl.h	2019-06-29 04:06:07.403675001 +1000
@@ -170,7 +170,9 @@
     ngx_str_t *cert, ngx_str_t *key, ngx_array_t *passwords);
 
 ngx_int_t ngx_ssl_ciphers(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *ciphers,
-    ngx_uint_t prefer_server_ciphers);
+    ngx_uint_t prefer_server_ciphers, ngx_uint_t prefer_chacha20);
+ngx_int_t ngx_ssl_ciphers_tls13(ngx_conf_t *cf, ngx_ssl_t *ssl, 
+    ngx_str_t *ciphers);
 ngx_int_t ngx_ssl_client_certificate(ngx_conf_t *cf, ngx_ssl_t *ssl,
     ngx_str_t *cert, ngx_int_t depth);
 ngx_int_t ngx_ssl_trusted_certificate(ngx_conf_t *cf, ngx_ssl_t *ssl,
@@ -226,6 +228,8 @@
     ngx_str_t *s);
 ngx_int_t ngx_ssl_get_ciphers(ngx_connection_t *c, ngx_pool_t *pool,
     ngx_str_t *s);
+ngx_int_t ngx_ssl_get_ciphers_tls13(ngx_connection_t *c, ngx_pool_t *pool,
+    ngx_str_t *s);
 ngx_int_t ngx_ssl_get_curves(ngx_connection_t *c, ngx_pool_t *pool,
     ngx_str_t *s);
 ngx_int_t ngx_ssl_get_session_id(ngx_connection_t *c, ngx_pool_t *pool,
diff -Nau3r nginx-1.17.1-origin/src/http/modules/ngx_http_grpc_module.c nginx-1.17.1/src/http/modules/ngx_http_grpc_module.c
--- a/src/http/modules/ngx_http_grpc_module.c	2019-06-25 22:19:45.000000000 +1000
+++ b/src/http/modules/ngx_http_grpc_module.c	2019-06-29 04:06:07.407008400 +1000
@@ -31,6 +31,7 @@
     ngx_uint_t                 ssl;
     ngx_uint_t                 ssl_protocols;
     ngx_str_t                  ssl_ciphers;
+    ngx_str_t                  ssl_ciphers_tls13;
     ngx_uint_t                 ssl_verify_depth;
     ngx_str_t                  ssl_trusted_certificate;
     ngx_str_t                  ssl_crl;
@@ -4674,7 +4675,7 @@
         }
     }
 
-    if (ngx_ssl_ciphers(cf, glcf->upstream.ssl, &glcf->ssl_ciphers, 0)
+    if (ngx_ssl_ciphers(cf, glcf->upstream.ssl, &glcf->ssl_ciphers, 0, 0)
         != NGX_OK)
     {
         return NGX_ERROR;
diff -Nau3r nginx-1.17.1-origin/src/http/modules/ngx_http_proxy_module.c nginx-1.17.1/src/http/modules/ngx_http_proxy_module.c
--- a/src/http/modules/ngx_http_proxy_module.c	2019-06-25 22:19:45.000000000 +1000
+++ b/src/http/modules/ngx_http_proxy_module.c	2019-06-29 04:06:07.407008400 +1000
@@ -94,6 +94,7 @@
     ngx_uint_t                     ssl;
     ngx_uint_t                     ssl_protocols;
     ngx_str_t                      ssl_ciphers;
+    ngx_str_t                      ssl_ciphers_tls13;
     ngx_uint_t                     ssl_verify_depth;
     ngx_str_t                      ssl_trusted_certificate;
     ngx_str_t                      ssl_crl;
@@ -4294,7 +4295,7 @@
         }
     }
 
-    if (ngx_ssl_ciphers(cf, plcf->upstream.ssl, &plcf->ssl_ciphers, 0)
+    if (ngx_ssl_ciphers(cf, plcf->upstream.ssl, &plcf->ssl_ciphers, 0, 0)
         != NGX_OK)
     {
         return NGX_ERROR;
diff -Nau3r nginx-1.17.1-origin/src/http/modules/ngx_http_ssl_module.c nginx-1.17.1/src/http/modules/ngx_http_ssl_module.c
--- a/src/http/modules/ngx_http_ssl_module.c	2019-06-25 22:19:45.000000000 +1000
+++ b/src/http/modules/ngx_http_ssl_module.c	2019-06-29 04:06:07.407008400 +1000
@@ -14,8 +14,9 @@
     ngx_pool_t *pool, ngx_str_t *s);
 
 
-#define NGX_DEFAULT_CIPHERS     "HIGH:!aNULL:!MD5"
-#define NGX_DEFAULT_ECDH_CURVE  "auto"
+#define NGX_DEFAULT_CIPHERS       "HIGH:!aNULL:!MD5"
+#define NGX_DEFAULT_CIPHERS_TLS13 "TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256"
+#define NGX_DEFAULT_ECDH_CURVE    "auto"
 
 #define NGX_HTTP_NPN_ADVERTISE  "\x08http/1.1"
 
@@ -137,6 +138,13 @@
       offsetof(ngx_http_ssl_srv_conf_t, ciphers),
       NULL },
 
+    { ngx_string("ssl_ciphers_tls13"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_str_slot,
+      NGX_HTTP_SRV_CONF_OFFSET,
+      offsetof(ngx_http_ssl_srv_conf_t, ciphers_tls13),
+      NULL },
+
     { ngx_string("ssl_buffer_size"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_size_slot,
@@ -179,6 +187,13 @@
       offsetof(ngx_http_ssl_srv_conf_t, prefer_server_ciphers),
       NULL },
 
+    { ngx_string("ssl_prefer_chacha20"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_CONF_FLAG,
+      ngx_conf_set_flag_slot,
+      NGX_HTTP_SRV_CONF_OFFSET,
+      offsetof(ngx_http_ssl_srv_conf_t, prefer_chacha20),
+      NULL },
+
     { ngx_string("ssl_session_cache"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_CONF_TAKE12,
       ngx_http_ssl_session_cache,
@@ -295,6 +310,9 @@
     { ngx_string("ssl_ciphers"), NULL, ngx_http_ssl_variable,
       (uintptr_t) ngx_ssl_get_ciphers, NGX_HTTP_VAR_CHANGEABLE, 0 },
 
+    { ngx_string("ssl_ciphers_tls13"), NULL, ngx_http_ssl_variable,
+      (uintptr_t) ngx_ssl_get_ciphers_tls13, NGX_HTTP_VAR_CHANGEABLE, 0 },
+
     { ngx_string("ssl_curves"), NULL, ngx_http_ssl_variable,
       (uintptr_t) ngx_ssl_get_curves, NGX_HTTP_VAR_CHANGEABLE, 0 },
 
@@ -567,6 +585,7 @@
 
     sscf->enable = NGX_CONF_UNSET;
     sscf->prefer_server_ciphers = NGX_CONF_UNSET;
+    sscf->prefer_chacha20 = NGX_CONF_UNSET;
     sscf->early_data = NGX_CONF_UNSET;
     sscf->buffer_size = NGX_CONF_UNSET_SIZE;
     sscf->verify = NGX_CONF_UNSET_UINT;
@@ -610,6 +629,9 @@
     ngx_conf_merge_value(conf->prefer_server_ciphers,
                          prev->prefer_server_ciphers, 0);
 
+    ngx_conf_merge_value(conf->prefer_chacha20,
+                         prev->prefer_chacha20, 0);
+
     ngx_conf_merge_value(conf->early_data, prev->early_data, 0);
 
     ngx_conf_merge_bitmask_value(conf->protocols, prev->protocols,
@@ -640,6 +662,7 @@
                          NGX_DEFAULT_ECDH_CURVE);
 
     ngx_conf_merge_str_value(conf->ciphers, prev->ciphers, NGX_DEFAULT_CIPHERS);
+    ngx_conf_merge_str_value(conf->ciphers_tls13, prev->ciphers_tls13, NGX_DEFAULT_CIPHERS_TLS13);
 
     ngx_conf_merge_value(conf->stapling, prev->stapling, 0);
     ngx_conf_merge_value(conf->stapling_verify, prev->stapling_verify, 0);
@@ -765,7 +788,14 @@
     }
 
     if (ngx_ssl_ciphers(cf, &conf->ssl, &conf->ciphers,
-                        conf->prefer_server_ciphers)
+                        conf->prefer_server_ciphers, 
+                        conf->prefer_chacha20)
+        != NGX_OK)
+    {
+        return NGX_CONF_ERROR;
+    }
+
+    if (ngx_ssl_ciphers_tls13(cf, &conf->ssl, &conf->ciphers_tls13) 
         != NGX_OK)
     {
         return NGX_CONF_ERROR;
diff -Nau3r nginx-1.17.1-origin/src/http/modules/ngx_http_ssl_module.h nginx-1.17.1/src/http/modules/ngx_http_ssl_module.h
--- a/src/http/modules/ngx_http_ssl_module.h	2019-06-25 22:19:45.000000000 +1000
+++ b/src/http/modules/ngx_http_ssl_module.h	2019-06-29 04:06:07.407008400 +1000
@@ -20,6 +20,7 @@
     ngx_ssl_t                       ssl;
 
     ngx_flag_t                      prefer_server_ciphers;
+    ngx_flag_t                      prefer_chacha20;
     ngx_flag_t                      early_data;
 
     ngx_uint_t                      protocols;
@@ -46,6 +47,7 @@
     ngx_str_t                       crl;
 
     ngx_str_t                       ciphers;
+    ngx_str_t                       ciphers_tls13;
 
     ngx_array_t                    *passwords;
 
diff -Nau3r nginx-1.17.1-origin/src/http/modules/ngx_http_uwsgi_module.c nginx-1.17.1/src/http/modules/ngx_http_uwsgi_module.c
--- a/src/http/modules/ngx_http_uwsgi_module.c	2019-06-25 22:19:45.000000000 +1000
+++ b/src/http/modules/ngx_http_uwsgi_module.c	2019-06-29 04:06:07.407008400 +1000
@@ -51,6 +51,7 @@
     ngx_uint_t                 ssl;
     ngx_uint_t                 ssl_protocols;
     ngx_str_t                  ssl_ciphers;
+    ngx_str_t                  ssl_ciphers_tls13;
     ngx_uint_t                 ssl_verify_depth;
     ngx_str_t                  ssl_trusted_certificate;
     ngx_str_t                  ssl_crl;
@@ -2383,11 +2384,18 @@
         }
     }
 
-    if (ngx_ssl_ciphers(cf, uwcf->upstream.ssl, &uwcf->ssl_ciphers, 0)
+    if (ngx_ssl_ciphers(cf, uwcf->upstream.ssl, &uwcf->ssl_ciphers, 0, 0)
         != NGX_OK)
     {
         return NGX_ERROR;
     }
+
+    if (ngx_ssl_ciphers_tls13(cf, uwcf->upstream.ssl, 
+                              &uwcf->ssl_ciphers_tls13)
+         != NGX_OK)
+    {
+        return NGX_ERROR;
+    }
 
     if (uwcf->upstream.ssl_verify) {
         if (uwcf->ssl_trusted_certificate.len == 0) {
diff -Nau3r nginx-1.17.1-origin/src/stream/ngx_stream_proxy_module.c nginx-1.17.1/src/stream/ngx_stream_proxy_module.c
--- a/src/stream/ngx_stream_proxy_module.c	2019-06-25 22:19:45.000000000 +1000
+++ b/src/stream/ngx_stream_proxy_module.c	2019-06-29 04:06:07.407008400 +1000
@@ -39,6 +39,7 @@
     ngx_flag_t                       ssl_session_reuse;
     ngx_uint_t                       ssl_protocols;
     ngx_str_t                        ssl_ciphers;
+    ngx_str_t                        ssl_ciphers_tls13;
     ngx_stream_complex_value_t      *ssl_name;
     ngx_flag_t                       ssl_server_name;
 
@@ -2125,7 +2126,14 @@
         }
     }
 
-    if (ngx_ssl_ciphers(cf, pscf->ssl, &pscf->ssl_ciphers, 0) != NGX_OK) {
+    if (ngx_ssl_ciphers(cf, pscf->ssl, &pscf->ssl_ciphers, 0, 0) 
+        != NGX_OK) {
+        return NGX_ERROR;
+    }
+
+    if (ngx_ssl_ciphers_tls13(cf, pscf->ssl, &pscf->ssl_ciphers_tls13)
+        != NGX_OK)
+    {
         return NGX_ERROR;
     }
 
diff -Nau3r nginx-1.17.1-origin/src/stream/ngx_stream_ssl_module.c nginx-1.17.1/src/stream/ngx_stream_ssl_module.c
--- a/src/stream/ngx_stream_ssl_module.c	2019-06-25 22:19:45.000000000 +1000
+++ b/src/stream/ngx_stream_ssl_module.c	2019-06-29 04:06:07.410341798 +1000
@@ -735,7 +735,14 @@
     }
 
     if (ngx_ssl_ciphers(cf, &conf->ssl, &conf->ciphers,
-                        conf->prefer_server_ciphers)
+                        conf->prefer_server_ciphers, 
+                        conf->prefer_chacha20)
+        != NGX_OK)
+    {
+        return NGX_CONF_ERROR;
+    }
+
+    if (ngx_ssl_ciphers_tls13(cf, &conf->ssl, &conf->ciphers_tls13)
         != NGX_OK)
     {
         return NGX_CONF_ERROR;
diff -Nau3r nginx-1.17.1-origin/src/stream/ngx_stream_ssl_module.h nginx-1.17.1/src/stream/ngx_stream_ssl_module.h
--- a/src/stream/ngx_stream_ssl_module.h	2019-06-25 22:19:45.000000000 +1000
+++ b/src/stream/ngx_stream_ssl_module.h	2019-06-29 04:06:07.410341798 +1000
@@ -18,6 +18,7 @@
     ngx_msec_t       handshake_timeout;
 
     ngx_flag_t       prefer_server_ciphers;
+    ngx_flag_t       prefer_chacha20;
 
     ngx_ssl_t        ssl;
 
@@ -44,6 +45,7 @@
     ngx_str_t        crl;
 
     ngx_str_t        ciphers;
+    ngx_str_t        ciphers_tls13;
 
     ngx_array_t     *passwords;
 
