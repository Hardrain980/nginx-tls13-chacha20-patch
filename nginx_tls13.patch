diff -Nar -u5 nginx-1.15.3_origin/src/event/ngx_event_openssl.c nginx-1.15.3/src/event/ngx_event_openssl.c
--- nginx-1.15.3_origin/src/event/ngx_event_openssl.c	2018-08-29 01:36:00.000000000 +1000
+++ nginx-1.15.3/src/event/ngx_event_openssl.c	2018-09-17 13:42:44.750042636 +1000
@@ -334,10 +334,14 @@
 #ifdef TLS1_3_VERSION
     SSL_CTX_set_min_proto_version(ssl->ctx, 0);
     SSL_CTX_set_max_proto_version(ssl->ctx, TLS1_3_VERSION);
 #endif
 
+#ifdef SSL_OP_PRIORITIZE_CHACHA
+    SSL_CTX_set_options(ssl->ctx, SSL_OP_PRIORITIZE_CHACHA);
+#endif
+
 #ifdef SSL_OP_NO_COMPRESSION
     SSL_CTX_set_options(ssl->ctx, SSL_OP_NO_COMPRESSION);
 #endif
 
 #ifdef SSL_MODE_RELEASE_BUFFERS
@@ -658,10 +662,24 @@
     return NGX_OK;
 }
 
 
 ngx_int_t
+ngx_ssl_ciphers_tls13(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *ciphers_tls13)
+{
+    if (SSL_CTX_set_ciphersuites(ssl->ctx, (char *) ciphers_tls13->data) == 0) {
+        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
+                      "SSL_CTX_set_ciphersuites(\"%V\") failed",
+                      ciphers_tls13);
+        return NGX_ERROR;
+    }
+
+    return NGX_OK;
+}
+
+
+ngx_int_t
 ngx_ssl_client_certificate(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *cert,
     ngx_int_t depth)
 {
     STACK_OF(X509_NAME)  *list;
 
@@ -3449,10 +3506,95 @@
 {
 #ifdef SSL_CTRL_GET_RAW_CIPHERLIST
 
     int                n, i, bytes;
     size_t             len;
+    u_char            *ciphers, *p;
+    const SSL_CIPHER  *cipher;
+
+    bytes = SSL_get0_raw_cipherlist(c->ssl->connection, NULL);
+    n = SSL_get0_raw_cipherlist(c->ssl->connection, &ciphers);
+
+    if (n <= 0) {
+        s->len = 0;
+        return NGX_OK;
+    }
+
+    len = 0;
+    n /= bytes;
+
+    for (i = 0; i < n; i++) {
+        cipher = SSL_CIPHER_find(c->ssl->connection, ciphers + i * bytes);
+
+        if (cipher) {
+            len += ngx_strlen(SSL_CIPHER_get_name(cipher));
+
+        } else {
+            len += sizeof("0x") - 1 + bytes * (sizeof("00") - 1);
+        }
+
+        len += sizeof(":") - 1;
+    }
+
+    s->data = ngx_pnalloc(pool, len);
+    if (s->data == NULL) {
+        return NGX_ERROR;
+    }
+
+    p = s->data;
+
+    for (i = 0; i < n; i++) {
+        cipher = SSL_CIPHER_find(c->ssl->connection, ciphers + i * bytes);
+
+        if (cipher) {
+            p = ngx_sprintf(p, "%s", SSL_CIPHER_get_name(cipher));
+
+        } else {
+            p = ngx_sprintf(p, "0x");
+            p = ngx_hex_dump(p, ciphers + i * bytes, bytes);
+        }
+
+        *p++ = ':';
+    }
+
+    p--;
+
+    s->len = p - s->data;
+
+#else
+
+    u_char  buf[4096];
+
+    if (SSL_get_shared_ciphers(c->ssl->connection, (char *) buf, 4096)
+        == NULL)
+    {
+        s->len = 0;
+        return NGX_OK;
+    }
+
+    s->len = ngx_strlen(buf);
+    s->data = ngx_pnalloc(pool, s->len);
+    if (s->data == NULL) {
+        return NGX_ERROR;
+    }
+
+    ngx_memcpy(s->data, buf, s->len);
+
+#endif
+
+    return NGX_OK;
+}
+
+
+// TBD
+ngx_int_t
+ngx_ssl_get_ciphers_tls13(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
+{
+#ifdef SSL_CTRL_GET_RAW_CIPHERLIST
+
+    int                n, i, bytes;
+    size_t             len;
     u_char            *ciphers, *p;
     const SSL_CIPHER  *cipher;
 
     bytes = SSL_get0_raw_cipherlist(c->ssl->connection, NULL);
     n = SSL_get0_raw_cipherlist(c->ssl->connection, &ciphers);

diff -Nar -u5 nginx-1.15.3_origin/src/event/ngx_event_openssl.h nginx-1.15.3/src/event/ngx_event_openssl.h
--- nginx-1.15.3_origin/src/event/ngx_event_openssl.h	2018-08-29 01:36:00.000000000 +1000
+++ nginx-1.15.3/src/event/ngx_event_openssl.h	2018-09-14 00:54:34.868081934 +1000

@@ -159,10 +172,11 @@
     ngx_array_t *certs, ngx_array_t *keys, ngx_array_t *passwords);
 ngx_int_t ngx_ssl_certificate(ngx_conf_t *cf, ngx_ssl_t *ssl,
     ngx_str_t *cert, ngx_str_t *key, ngx_array_t *passwords);
 ngx_int_t ngx_ssl_ciphers(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *ciphers,
     ngx_uint_t prefer_server_ciphers);
+ngx_int_t ngx_ssl_ciphers_tls13(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *ciphers);
 ngx_int_t ngx_ssl_client_certificate(ngx_conf_t *cf, ngx_ssl_t *ssl,
     ngx_str_t *cert, ngx_int_t depth);
 ngx_int_t ngx_ssl_trusted_certificate(ngx_conf_t *cf, ngx_ssl_t *ssl,
     ngx_str_t *cert, ngx_int_t depth);
 ngx_int_t ngx_ssl_crl(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *crl);
@@ -211,10 +225,12 @@
     ngx_str_t *s);
 ngx_int_t ngx_ssl_get_cipher_name(ngx_connection_t *c, ngx_pool_t *pool,
     ngx_str_t *s);
 ngx_int_t ngx_ssl_get_ciphers(ngx_connection_t *c, ngx_pool_t *pool,
     ngx_str_t *s);
+ngx_int_t ngx_ssl_get_ciphers_tls13(ngx_connection_t *c, ngx_pool_t *pool,
+    ngx_str_t *s);
 ngx_int_t ngx_ssl_get_curves(ngx_connection_t *c, ngx_pool_t *pool,
     ngx_str_t *s);
 ngx_int_t ngx_ssl_get_session_id(ngx_connection_t *c, ngx_pool_t *pool,
     ngx_str_t *s);
 ngx_int_t ngx_ssl_get_session_reused(ngx_connection_t *c, ngx_pool_t *pool,
diff -Nar -u5 nginx-1.15.3_origin/src/http/modules/ngx_http_ssl_module.c nginx-1.15.3/src/http/modules/ngx_http_ssl_module.c
--- nginx-1.15.3_origin/src/http/modules/ngx_http_ssl_module.c	2018-08-29 01:36:00.000000000 +1000
+++ nginx-1.15.3/src/http/modules/ngx_http_ssl_module.c	2018-09-14 00:54:03.169248715 +1000
@@ -13,10 +13,11 @@
 typedef ngx_int_t (*ngx_ssl_variable_handler_pt)(ngx_connection_t *c,
     ngx_pool_t *pool, ngx_str_t *s);
 
 
 #define NGX_DEFAULT_CIPHERS     "HIGH:!aNULL:!MD5"
+#define NGX_DEFAULT_CIPHERS_TLS13 "TLS_AES_128_GCM_SHA256"
 #define NGX_DEFAULT_ECDH_CURVE  "auto"
 
 #define NGX_HTTP_NPN_ADVERTISE  "\x08http/1.1"
 
 
@@ -132,10 +133,18 @@
       ngx_conf_set_str_slot,
       NGX_HTTP_SRV_CONF_OFFSET,
       offsetof(ngx_http_ssl_srv_conf_t, ciphers),
       NULL },
 
+    // TBD
+    { ngx_string("ssl_ciphers_tls13"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_str_slot,
+      NGX_HTTP_SRV_CONF_OFFSET,
+      offsetof(ngx_http_ssl_srv_conf_t, ciphers_tls13),
+      NULL },
+
     { ngx_string("ssl_buffer_size"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_size_slot,
       NGX_HTTP_SRV_CONF_OFFSET,
       offsetof(ngx_http_ssl_srv_conf_t, buffer_size),
@@ -290,10 +334,14 @@
       (uintptr_t) ngx_ssl_get_cipher_name, NGX_HTTP_VAR_CHANGEABLE, 0 },
 
     { ngx_string("ssl_ciphers"), NULL, ngx_http_ssl_variable,
       (uintptr_t) ngx_ssl_get_ciphers, NGX_HTTP_VAR_CHANGEABLE, 0 },
 
+    //TBD
+    { ngx_string("ssl_ciphers_tls13"), NULL, ngx_http_ssl_variable,
+      (uintptr_t) ngx_ssl_get_ciphers_tls13, NGX_HTTP_VAR_CHANGEABLE, 0 },
+
     { ngx_string("ssl_curves"), NULL, ngx_http_ssl_variable,
       (uintptr_t) ngx_ssl_get_curves, NGX_HTTP_VAR_CHANGEABLE, 0 },
 
     { ngx_string("ssl_session_id"), NULL, ngx_http_ssl_variable,
       (uintptr_t) ngx_ssl_get_session_id, NGX_HTTP_VAR_CHANGEABLE, 0 },
@@ -739,10 +851,18 @@
         != NGX_OK)
     {
         return NGX_CONF_ERROR;
     }
 
+    // TBD
+    if (ngx_ssl_ciphers_tls13(cf, &conf->ssl, &conf->ciphers_tls13)
+        != NGX_OK)
+    {
+        return NGX_CONF_ERROR;
+    }
+
+
     conf->ssl.buffer_size = conf->buffer_size;
 
     if (conf->verify) {
 
         if (conf->client_certificate.len == 0 && conf->verify != 3) {
diff -Nar -u5 nginx-1.15.3_origin/src/http/modules/ngx_http_ssl_module.h nginx-1.15.3/src/http/modules/ngx_http_ssl_module.h
--- nginx-1.15.3_origin/src/http/modules/ngx_http_ssl_module.h	2018-08-29 01:36:00.000000000 +1000
+++ nginx-1.15.3/src/http/modules/ngx_http_ssl_module.h	2018-09-14 00:30:36.094340999 +1000
@@ -41,10 +41,11 @@
     ngx_str_t                       client_certificate;
     ngx_str_t                       trusted_certificate;
     ngx_str_t                       crl;
 
     ngx_str_t                       ciphers;
+    ngx_str_t                       ciphers_tls13;
 
     ngx_array_t                    *passwords;
 
     ngx_shm_zone_t                 *shm_zone;
 
