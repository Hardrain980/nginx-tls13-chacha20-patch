diff -Nar -u5 nginx-1.15.9_origin/src/event/ngx_event_openssl.c nginx-1.15.9/src/event/ngx_event_openssl.c
--- a/src/event/ngx_event_openssl.c	2019-02-27 02:29:22.000000000 +1100
+++ b/src/event/ngx_event_openssl.c	2019-03-03 00:21:36.907826737 +1100
@@ -817,11 +817,11 @@
 }
 
 
 ngx_int_t
 ngx_ssl_ciphers(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *ciphers,
-    ngx_uint_t prefer_server_ciphers)
+    ngx_uint_t prefer_server_ciphers, ngx_uint_t prefer_chacha20)
 {
     if (SSL_CTX_set_cipher_list(ssl->ctx, (char *) ciphers->data) == 0) {
         ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                       "SSL_CTX_set_cipher_list(\"%V\") failed",
                       ciphers);
@@ -830,18 +830,37 @@
 
     if (prefer_server_ciphers) {
         SSL_CTX_set_options(ssl->ctx, SSL_OP_CIPHER_SERVER_PREFERENCE);
     }
 
+    if (prefer_chacha20) {
+        #ifdef SSL_OP_PRIORITIZE_CHACHA
+        SSL_CTX_set_options(ssl->ctx, SSL_OP_PRIORITIZE_CHACHA);
+        #endif
+    }
+
 #if (OPENSSL_VERSION_NUMBER < 0x10100001L && !defined LIBRESSL_VERSION_NUMBER)
     /* a temporary 512-bit RSA key is required for export versions of MSIE */
     SSL_CTX_set_tmp_rsa_callback(ssl->ctx, ngx_ssl_rsa512_key_callback);
 #endif
 
     return NGX_OK;
 }
 
+ ngx_int_t
+ngx_ssl_ciphers_tls13(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *ciphers_tls13)
+{
+    if (SSL_CTX_set_ciphersuites(ssl->ctx, (char *) ciphers_tls13->data) == 0) {
+        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
+                      "SSL_CTX_set_ciphersuites(\"%V\") failed",
+                      ciphers_tls13);
+        return NGX_ERROR;
+    }
+
+    return NGX_OK;
+}
+
 
 ngx_int_t
 ngx_ssl_client_certificate(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *cert,
     ngx_int_t depth)
 {
@@ -4200,10 +4219,93 @@
 {
 #ifdef SSL_CTRL_GET_RAW_CIPHERLIST
 
     int                n, i, bytes;
     size_t             len;
+    u_char            *ciphers, *p;
+    const SSL_CIPHER  *cipher;
+
+    bytes = SSL_get0_raw_cipherlist(c->ssl->connection, NULL);
+    n = SSL_get0_raw_cipherlist(c->ssl->connection, &ciphers);
+
+    if (n <= 0) {
+        s->len = 0;
+        return NGX_OK;
+    }
+
+    len = 0;
+    n /= bytes;
+
+    for (i = 0; i < n; i++) {
+        cipher = SSL_CIPHER_find(c->ssl->connection, ciphers + i * bytes);
+
+        if (cipher) {
+            len += ngx_strlen(SSL_CIPHER_get_name(cipher));
+
+        } else {
+            len += sizeof("0x") - 1 + bytes * (sizeof("00") - 1);
+        }
+
+        len += sizeof(":") - 1;
+    }
+
+    s->data = ngx_pnalloc(pool, len);
+    if (s->data == NULL) {
+        return NGX_ERROR;
+    }
+
+    p = s->data;
+
+    for (i = 0; i < n; i++) {
+        cipher = SSL_CIPHER_find(c->ssl->connection, ciphers + i * bytes);
+
+        if (cipher) {
+            p = ngx_sprintf(p, "%s", SSL_CIPHER_get_name(cipher));
+
+        } else {
+            p = ngx_sprintf(p, "0x");
+            p = ngx_hex_dump(p, ciphers + i * bytes, bytes);
+        }
+
+        *p++ = ':';
+    }
+
+    p--;
+
+    s->len = p - s->data;
+
+#else
+
+    u_char  buf[4096];
+
+    if (SSL_get_shared_ciphers(c->ssl->connection, (char *) buf, 4096)
+        == NULL)
+    {
+        s->len = 0;
+        return NGX_OK;
+    }
+
+    s->len = ngx_strlen(buf);
+    s->data = ngx_pnalloc(pool, s->len);
+    if (s->data == NULL) {
+        return NGX_ERROR;
+    }
+
+    ngx_memcpy(s->data, buf, s->len);
+
+#endif
+
+    return NGX_OK;
+}
+
+ngx_int_t
+ngx_ssl_get_ciphers_tls13(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
+{
+#ifdef SSL_CTRL_GET_RAW_CIPHERLIST
+
+    int                n, i, bytes;
+    size_t             len;
     u_char            *ciphers, *p;
     const SSL_CIPHER  *cipher;
 
     bytes = SSL_get0_raw_cipherlist(c->ssl->connection, NULL);
     n = SSL_get0_raw_cipherlist(c->ssl->connection, &ciphers);
diff -Nar -u5 nginx-1.15.9_origin/src/event/ngx_event_openssl.h nginx-1.15.9/src/event/ngx_event_openssl.h
--- a/src/event/ngx_event_openssl.h	2019-02-27 02:29:22.000000000 +1100
+++ b/src/event/ngx_event_openssl.h	2019-03-03 00:50:33.847489461 +1100
@@ -168,11 +168,12 @@
     ngx_str_t *cert, ngx_str_t *key, ngx_array_t *passwords);
 ngx_int_t ngx_ssl_connection_certificate(ngx_connection_t *c, ngx_pool_t *pool,
     ngx_str_t *cert, ngx_str_t *key, ngx_array_t *passwords);
 
 ngx_int_t ngx_ssl_ciphers(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *ciphers,
-    ngx_uint_t prefer_server_ciphers);
+    ngx_uint_t prefer_server_ciphers, ngx_uint_t prefer_chacha20);
+ngx_int_t ngx_ssl_ciphers_tls13(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *ciphers);
 ngx_int_t ngx_ssl_client_certificate(ngx_conf_t *cf, ngx_ssl_t *ssl,
     ngx_str_t *cert, ngx_int_t depth);
 ngx_int_t ngx_ssl_trusted_certificate(ngx_conf_t *cf, ngx_ssl_t *ssl,
     ngx_str_t *cert, ngx_int_t depth);
 ngx_int_t ngx_ssl_crl(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *crl);
@@ -224,10 +225,12 @@
     ngx_str_t *s);
 ngx_int_t ngx_ssl_get_cipher_name(ngx_connection_t *c, ngx_pool_t *pool,
     ngx_str_t *s);
 ngx_int_t ngx_ssl_get_ciphers(ngx_connection_t *c, ngx_pool_t *pool,
     ngx_str_t *s);
+ngx_int_t ngx_ssl_get_ciphers_tls13(ngx_connection_t *c, ngx_pool_t *pool,
+    ngx_str_t *s);
 ngx_int_t ngx_ssl_get_curves(ngx_connection_t *c, ngx_pool_t *pool,
     ngx_str_t *s);
 ngx_int_t ngx_ssl_get_session_id(ngx_connection_t *c, ngx_pool_t *pool,
     ngx_str_t *s);
 ngx_int_t ngx_ssl_get_session_reused(ngx_connection_t *c, ngx_pool_t *pool,
diff -Nar -u5 nginx-1.15.9_origin/src/http/modules/ngx_http_grpc_module.c nginx-1.15.9/src/http/modules/ngx_http_grpc_module.c
--- a/src/http/modules/ngx_http_grpc_module.c	2019-02-27 02:29:22.000000000 +1100
+++ b/src/http/modules/ngx_http_grpc_module.c	2019-03-03 01:02:12.133691982 +1100
@@ -29,10 +29,11 @@
 
 #if (NGX_HTTP_SSL)
     ngx_uint_t                 ssl;
     ngx_uint_t                 ssl_protocols;
     ngx_str_t                  ssl_ciphers;
+    ngx_str_t                  ssl_ciphers_tls13;
     ngx_uint_t                 ssl_verify_depth;
     ngx_str_t                  ssl_trusted_certificate;
     ngx_str_t                  ssl_crl;
     ngx_str_t                  ssl_certificate;
     ngx_str_t                  ssl_certificate_key;
@@ -4671,11 +4672,17 @@
         {
             return NGX_ERROR;
         }
     }
 
-    if (ngx_ssl_ciphers(cf, glcf->upstream.ssl, &glcf->ssl_ciphers, 0)
+    if (ngx_ssl_ciphers(cf, glcf->upstream.ssl, &glcf->ssl_ciphers, 0, 0)
+        != NGX_OK)
+    {
+        return NGX_ERROR;
+    }
+
+    if (ngx_ssl_ciphers_tls13(cf, glcf->upstream.ssl, &glcf->ssl_ciphers_tls13)
         != NGX_OK)
     {
         return NGX_ERROR;
     }
 
diff -Nar -u5 nginx-1.15.9_origin/src/http/modules/ngx_http_proxy_module.c nginx-1.15.9/src/http/modules/ngx_http_proxy_module.c
--- a/src/http/modules/ngx_http_proxy_module.c	2019-02-27 02:29:22.000000000 +1100
+++ b/src/http/modules/ngx_http_proxy_module.c	2019-03-03 00:59:29.134093430 +1100
@@ -92,10 +92,11 @@
 
 #if (NGX_HTTP_SSL)
     ngx_uint_t                     ssl;
     ngx_uint_t                     ssl_protocols;
     ngx_str_t                      ssl_ciphers;
+    ngx_str_t                      ssl_ciphers_tls13;
     ngx_uint_t                     ssl_verify_depth;
     ngx_str_t                      ssl_trusted_certificate;
     ngx_str_t                      ssl_crl;
     ngx_str_t                      ssl_certificate;
     ngx_str_t                      ssl_certificate_key;
@@ -4291,11 +4292,17 @@
         {
             return NGX_ERROR;
         }
     }
 
-    if (ngx_ssl_ciphers(cf, plcf->upstream.ssl, &plcf->ssl_ciphers, 0)
+    if (ngx_ssl_ciphers(cf, plcf->upstream.ssl, &plcf->ssl_ciphers, 0, 0)
+        != NGX_OK)
+    {
+        return NGX_ERROR;
+    }
+
+    if (ngx_ssl_ciphers_tls13(cf, plcf->upstream.ssl, &plcf->ssl_ciphers_tls13)
         != NGX_OK)
     {
         return NGX_ERROR;
     }
 
diff -Nar -u5 nginx-1.15.9_origin/src/http/modules/ngx_http_ssl_module.c nginx-1.15.9/src/http/modules/ngx_http_ssl_module.c
--- a/src/http/modules/ngx_http_ssl_module.c	2019-02-27 02:29:22.000000000 +1100
+++ b/src/http/modules/ngx_http_ssl_module.c	2019-03-03 00:29:21.551107808 +1100
@@ -13,10 +13,11 @@
 typedef ngx_int_t (*ngx_ssl_variable_handler_pt)(ngx_connection_t *c,
     ngx_pool_t *pool, ngx_str_t *s);
 
 
 #define NGX_DEFAULT_CIPHERS     "HIGH:!aNULL:!MD5"
+#define NGX_DEFAULT_CIPHERS_TLS13 "TLS_AES_128_GCM_SHA256"
 #define NGX_DEFAULT_ECDH_CURVE  "auto"
 
 #define NGX_HTTP_NPN_ADVERTISE  "\x08http/1.1"
 
 
@@ -135,10 +136,17 @@
       ngx_conf_set_str_slot,
       NGX_HTTP_SRV_CONF_OFFSET,
       offsetof(ngx_http_ssl_srv_conf_t, ciphers),
       NULL },
 
+    { ngx_string("ssl_ciphers_tls13"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_str_slot,
+      NGX_HTTP_SRV_CONF_OFFSET,
+      offsetof(ngx_http_ssl_srv_conf_t, ciphers_tls13),
+      NULL },
+
     { ngx_string("ssl_buffer_size"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_size_slot,
       NGX_HTTP_SRV_CONF_OFFSET,
       offsetof(ngx_http_ssl_srv_conf_t, buffer_size),
@@ -177,10 +185,17 @@
       ngx_conf_set_flag_slot,
       NGX_HTTP_SRV_CONF_OFFSET,
       offsetof(ngx_http_ssl_srv_conf_t, prefer_server_ciphers),
       NULL },
 
+    { ngx_string("ssl_prefer_chacha20"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_CONF_FLAG,
+      ngx_conf_set_flag_slot,
+      NGX_HTTP_SRV_CONF_OFFSET,
+      offsetof(ngx_http_ssl_srv_conf_t, prefer_chacha20),
+      NULL },
+
     { ngx_string("ssl_session_cache"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_CONF_TAKE12,
       ngx_http_ssl_session_cache,
       NGX_HTTP_SRV_CONF_OFFSET,
       0,
@@ -293,10 +308,13 @@
       (uintptr_t) ngx_ssl_get_cipher_name, NGX_HTTP_VAR_CHANGEABLE, 0 },
 
     { ngx_string("ssl_ciphers"), NULL, ngx_http_ssl_variable,
       (uintptr_t) ngx_ssl_get_ciphers, NGX_HTTP_VAR_CHANGEABLE, 0 },
 
+    { ngx_string("ssl_ciphers_tls13"), NULL, ngx_http_ssl_variable,
+      (uintptr_t) ngx_ssl_get_ciphers_tls13, NGX_HTTP_VAR_CHANGEABLE, 0 },
+
     { ngx_string("ssl_curves"), NULL, ngx_http_ssl_variable,
       (uintptr_t) ngx_ssl_get_curves, NGX_HTTP_VAR_CHANGEABLE, 0 },
 
     { ngx_string("ssl_session_id"), NULL, ngx_http_ssl_variable,
       (uintptr_t) ngx_ssl_get_session_id, NGX_HTTP_VAR_CHANGEABLE, 0 },
@@ -565,10 +583,11 @@
      *     sscf->stapling_responder = { 0, NULL };
      */
 
     sscf->enable = NGX_CONF_UNSET;
     sscf->prefer_server_ciphers = NGX_CONF_UNSET;
+    sscf->prefer_chacha20 = NGX_CONF_UNSET;
     sscf->early_data = NGX_CONF_UNSET;
     sscf->buffer_size = NGX_CONF_UNSET_SIZE;
     sscf->verify = NGX_CONF_UNSET_UINT;
     sscf->verify_depth = NGX_CONF_UNSET_UINT;
     sscf->certificates = NGX_CONF_UNSET_PTR;
@@ -608,10 +627,13 @@
                          prev->session_timeout, 300);
 
     ngx_conf_merge_value(conf->prefer_server_ciphers,
                          prev->prefer_server_ciphers, 0);
 
+    ngx_conf_merge_value(conf->prefer_chacha20,
+                         prev->prefer_chacha20, 0);
+
     ngx_conf_merge_value(conf->early_data, prev->early_data, 0);
 
     ngx_conf_merge_bitmask_value(conf->protocols, prev->protocols,
                          (NGX_CONF_BITMASK_SET|NGX_SSL_TLSv1
                           |NGX_SSL_TLSv1_1|NGX_SSL_TLSv1_2));
@@ -638,10 +660,11 @@
 
     ngx_conf_merge_str_value(conf->ecdh_curve, prev->ecdh_curve,
                          NGX_DEFAULT_ECDH_CURVE);
 
     ngx_conf_merge_str_value(conf->ciphers, prev->ciphers, NGX_DEFAULT_CIPHERS);
+    ngx_conf_merge_str_value(conf->ciphers_tls13, prev->ciphers_tls13, NGX_DEFAULT_CIPHERS_TLS13);
 
     ngx_conf_merge_value(conf->stapling, prev->stapling, 0);
     ngx_conf_merge_value(conf->stapling_verify, prev->stapling_verify, 0);
     ngx_conf_merge_str_value(conf->stapling_file, prev->stapling_file, "");
     ngx_conf_merge_str_value(conf->stapling_responder,
@@ -762,11 +785,17 @@
             return NGX_CONF_ERROR;
         }
     }
 
     if (ngx_ssl_ciphers(cf, &conf->ssl, &conf->ciphers,
-                        conf->prefer_server_ciphers)
+                        conf->prefer_server_ciphers, conf->prefer_chacha20)
+        != NGX_OK)
+    {
+        return NGX_CONF_ERROR;
+    }
+
+    if (ngx_ssl_ciphers_tls13(cf, &conf->ssl, &conf->ciphers_tls13)
         != NGX_OK)
     {
         return NGX_CONF_ERROR;
     }
 
diff -Nar -u5 nginx-1.15.9_origin/src/http/modules/ngx_http_ssl_module.h nginx-1.15.9/src/http/modules/ngx_http_ssl_module.h
--- a/src/http/modules/ngx_http_ssl_module.h	2019-02-27 02:29:22.000000000 +1100
+++ b/src/http/modules/ngx_http_ssl_module.h	2019-03-03 00:30:03.167034755 +1100
@@ -18,10 +18,11 @@
     ngx_flag_t                      enable;
 
     ngx_ssl_t                       ssl;
 
     ngx_flag_t                      prefer_server_ciphers;
+    ngx_flag_t                      prefer_chacha20;
     ngx_flag_t                      early_data;
 
     ngx_uint_t                      protocols;
 
     ngx_uint_t                      verify;
@@ -44,10 +45,11 @@
     ngx_str_t                       client_certificate;
     ngx_str_t                       trusted_certificate;
     ngx_str_t                       crl;
 
     ngx_str_t                       ciphers;
+    ngx_str_t                       ciphers_tls13;
 
     ngx_array_t                    *passwords;
 
     ngx_shm_zone_t                 *shm_zone;
 
diff -Nar -u5 nginx-1.15.9_origin/src/http/modules/ngx_http_uwsgi_module.c nginx-1.15.9/src/http/modules/ngx_http_uwsgi_module.c
--- a/src/http/modules/ngx_http_uwsgi_module.c	2019-02-27 02:29:22.000000000 +1100
+++ b/src/http/modules/ngx_http_uwsgi_module.c	2019-03-03 01:00:51.009890895 +1100
@@ -49,10 +49,11 @@
 
 #if (NGX_HTTP_SSL)
     ngx_uint_t                 ssl;
     ngx_uint_t                 ssl_protocols;
     ngx_str_t                  ssl_ciphers;
+    ngx_str_t                  ssl_ciphers_tls13;
     ngx_uint_t                 ssl_verify_depth;
     ngx_str_t                  ssl_trusted_certificate;
     ngx_str_t                  ssl_crl;
     ngx_str_t                  ssl_certificate;
     ngx_str_t                  ssl_certificate_key;
@@ -2380,11 +2381,17 @@
         {
             return NGX_ERROR;
         }
     }
 
-    if (ngx_ssl_ciphers(cf, uwcf->upstream.ssl, &uwcf->ssl_ciphers, 0)
+    if (ngx_ssl_ciphers(cf, uwcf->upstream.ssl, &uwcf->ssl_ciphers, 0, 0)
+        != NGX_OK)
+    {
+        return NGX_ERROR;
+    }
+
+    if (ngx_ssl_ciphers_tls13(cf, uwcf->upstream.ssl, &uwcf->ssl_ciphers_tls13)
         != NGX_OK)
     {
         return NGX_ERROR;
     }
 
diff -Nar -u5 nginx-1.15.9_origin/src/stream/ngx_stream_proxy_module.c nginx-1.15.9/src/stream/ngx_stream_proxy_module.c
--- a/src/stream/ngx_stream_proxy_module.c	2019-02-27 02:29:22.000000000 +1100
+++ b/src/stream/ngx_stream_proxy_module.c	2019-03-03 01:03:54.601442845 +1100
@@ -37,10 +37,11 @@
 #if (NGX_STREAM_SSL)
     ngx_flag_t                       ssl_enable;
     ngx_flag_t                       ssl_session_reuse;
     ngx_uint_t                       ssl_protocols;
     ngx_str_t                        ssl_ciphers;
+    ngx_str_t                        ssl_ciphers_tls13;
     ngx_stream_complex_value_t      *ssl_name;
     ngx_flag_t                       ssl_server_name;
 
     ngx_flag_t                       ssl_verify;
     ngx_uint_t                       ssl_verify_depth;
@@ -2117,11 +2118,17 @@
         {
             return NGX_ERROR;
         }
     }
 
-    if (ngx_ssl_ciphers(cf, pscf->ssl, &pscf->ssl_ciphers, 0) != NGX_OK) {
+    if (ngx_ssl_ciphers(cf, pscf->ssl, &pscf->ssl_ciphers, 0, 0) != NGX_OK) {
+        return NGX_ERROR;
+    }
+
+    if (ngx_ssl_ciphers_tls13(cf, pscf->ssl, &pscf->ssl_ciphers_tls13)
+        != NGX_OK)
+    {
         return NGX_ERROR;
     }
 
     if (pscf->ssl_verify) {
         if (pscf->ssl_trusted_certificate.len == 0) {
diff -Nar -u5 nginx-1.15.9_origin/src/stream/ngx_stream_ssl_module.c nginx-1.15.9/src/stream/ngx_stream_ssl_module.c
--- a/src/stream/ngx_stream_ssl_module.c	2019-02-27 02:29:22.000000000 +1100
+++ b/src/stream/ngx_stream_ssl_module.c	2019-03-03 01:04:53.933299507 +1100
@@ -713,11 +713,17 @@
             return NGX_CONF_ERROR;
         }
     }
 
     if (ngx_ssl_ciphers(cf, &conf->ssl, &conf->ciphers,
-                        conf->prefer_server_ciphers)
+                        conf->prefer_server_ciphers, conf->prefer_chacha20)
+        != NGX_OK)
+    {
+        return NGX_CONF_ERROR;
+    }
+
+    if (ngx_ssl_ciphers_tls13(cf, &conf->ssl, &conf->ciphers_tls13)
         != NGX_OK)
     {
         return NGX_CONF_ERROR;
     }
 
diff -Nar -u5 nginx-1.15.9_origin/src/stream/ngx_stream_ssl_module.h nginx-1.15.9/src/stream/ngx_stream_ssl_module.h
--- a/src/stream/ngx_stream_ssl_module.h	2019-02-27 02:29:22.000000000 +1100
+++ b/src/stream/ngx_stream_ssl_module.h	2019-03-03 00:40:04.505516654 +1100
@@ -16,10 +16,11 @@
 
 typedef struct {
     ngx_msec_t       handshake_timeout;
 
     ngx_flag_t       prefer_server_ciphers;
+    ngx_flag_t       prefer_chacha20;
 
     ngx_ssl_t        ssl;
 
     ngx_uint_t       listen;
     ngx_uint_t       protocols;
@@ -42,10 +43,11 @@
     ngx_str_t        client_certificate;
     ngx_str_t        trusted_certificate;
     ngx_str_t        crl;
 
     ngx_str_t        ciphers;
+    ngx_str_t        ciphers_tls13;
 
     ngx_array_t     *passwords;
 
     ngx_shm_zone_t  *shm_zone;
 
